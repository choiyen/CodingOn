<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>동적 폼 전송</title>
    <script
      src="https://code.jquery.com/jquery-3.7.1.min.js"
      integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo="
      crossorigin="anonymous"
    ></script>
    <!-- axios를 쓰기 위한 CDN 코드 -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <style>
      div.result {
        font-size: 24px;
        font-weight: 700;
      }
    </style>
  </head>
  <body>
    <h1>동적 form 전송 연습하기!</h1>
    <!-- 이름, 성별을 입력 받는 폼 -->
    <form name="register">
      <label for="username">이름</label>
      <input type="text" name="username" id="username" />
      <br />
      <fieldset>
        <legend>성별</legend>
        <input type="radio" name="gender" id="male" value="남자" />
        <label for="male">남자</label>
        <input type="radio" name="gender" id="female" value="여자" />
        <label for="female">여자</label>
      </fieldset>
      <br />
      <button type="button" onclick="ajaxGet()">Ajax로 get 제출</button>
      <button type="button" onclick="ajaxPost()">Ajax로 post 제출</button>
      <button type="button" onclick="axiosGET()">Axios로 Get 제출</button>
      <button type="button" onclick="axiosasynsGET()">
        axiosasynsGET 제출
      </button>
      <button type="button" onclick="axiosPOST()">Axios로 POST 제출</button>
      <button type="button" onclick="axiosasynsPOST()">
        Axios asyns로 POST 제출
      </button>
      <button type="button" onclick="fetchGET()">fetch로 Get 제출</button>
      <button type="button" onclick="fetchasynsGET()">
        fetch로 asyns Get 제출
      </button>

      <button type="button" onclick="fetchPOST()">fetch로 POST 제출</button>
      <button type="button" onclick="fetchasynsPOST()">
        fetch로 asyns POST 제출
      </button>
    </form>

    <!-- 동적 폼 전송 결과를 보여줄 곳 -->
    <div class="result"></div>
    <script>
      const resultBox = document.querySelector(".result");
      function ajaxGet() {
        console.log("ajaxGet 함수 호출");
        const form = document.forms["register"]; //배열이라고 보면 됨.

        console.log(form);
        console.log(form.gender.value);
        console.log(form.username.value);

        const date = {
          name: form.username.value,
          gender: form.gender.value,
        };

        $.ajax({
          type: "get",
          //요청의 종류 (*form의 method 속성)
          url: "/ajax", //요청의 경로(*form의 action 속성)
          data: date, // 요청에 실어보낼 데이터,
          success: function (data) {
            //요청이 성공적으로 수행되었을 때 실행 될 함수
            console.log("success");
            console.log("success", data);
            resultBox.textContent = `Get /ajax 요청 완료 : ${data.name} 님의 성별은 ${data.gender} 네요~`;
          },
        });
      }
      function ajaxPost() {
        console.log("ajaxPost 함수 호출");
        const form = document.forms["register"]; //배열이라고 보면 됨.

        const date = {
          name: form.username.value,
          gender: form.gender.value,
        }; //form 테그에서 가져올 때는 똑같음.

        $.ajax({
          type: "post",
          //요청의 종류 (*form의 method 속성)
          url: "/ajax",
          //요청의 경로(*form의 action 속성) -> 서버 상에서 정보를 받기 위한 경로라 별도의 페이지를 둘 필요는 없음.
          //단, 제출 버튼이 button이 아닌 submit이면 필요함.
          data: date, // 요청에 실어보낼 데이터,
          success: function (data) {
            //요청이 성공적으로 수행되었을 때 실행 될 함수
            console.log("success");
            console.log("success", data);
            resultBox.textContent = `POST /ajax 요청 완료 : ${data.name} 님의 성별은 ${data.gender} 네요~`;
          },
        });
      }

      function axiosGET() {
        console.log("axiosGet 함수 호출");
        const form = document.forms["register"];
        const date = {
          name: form.username.value,
          gender: form.gender.value,
        };

        // axios 요청의 결과는 Promise 객체
        // -> then - catch 메서드로 체이닝 가능
        // -> async/await도 사용 가능

        axios({
          method: "get",
          url: "/axios",
          //params 키를 사용하지 않고 쿼리 스트링을 직접 정의해서 요청을 보낼 수도 있음.
          params: date,
        }).then((response) => {
          console.log("axios 성공");
          console.log(response); // 서버의 응답 결과(response.data에 응답 데이터가 담김)
          resultBox.textContent = `GET /axios 요청 완료 : ${response.data.name} 님의 성별은 ${response.data.gender} 네요~`;
        });
      }
      async function axiosasynsGET() {
        console.log("axiosGet 함수 호출");
        const form = document.forms["register"];
        const date = {
          name: form.username.value,
          gender: form.gender.value,
        };

        // axios 요청의 결과는 Promise 객체
        // -> then - catch 메서드로 체이닝 가능
        // -> async/await도 사용 가능
        try {
          const response = await axios({
            method: "get",
            url: `/axios?name=${date.name}&gender=${date.gender}`,
            //params: date,
          }); //promise 객체를 반환함.

          const { name, gender } = response.data; //구조 분해 할당.
          resultBox.textContent = `GET /axios 요청 완료 : ${name} 님의 성별은 ${gender} 네요~`;
        } catch (err) {
          resultBox.textContent = "에러 발생! 다시 시도해주세요~";
          console.log(err);
        }
      }
      function axiosPOST() {
        console.log("axiosPOST 함수 호출");
        const form = document.forms["register"];
        const date = {
          name: form.username.value,
          gender: form.gender.value,
        };

        // axios 요청의 결과는 Promise 객체
        // -> then - catch 메서드로 체이닝 가능
        // -> async/await도 사용 가능

        axios({
          method: "post",
          url: "/axios",
          data: date,
        }).then((response) => {
          console.log("axios 성공");
          console.log(response); // 서버의 응답 결과(response.data에 응답 데이터가 담김)
          resultBox.textContent = `post /axios 요청 완료 : ${response.data.name} 님의 성별은 ${response.data.gender} 네요~`;
        });
      }
      async function axiosasynsPOST() {
        console.log("axiosGet 함수 호출");
        const form = document.forms["register"];
        const date = {
          name: form.username.value,
          gender: form.gender.value,
        };

        // axios 요청의 결과는 Promise 객체
        // -> then - catch 메서드로 체이닝 가능
        // -> async/await도 사용 가능
        try {
          const response = await axios({
            method: "post",
            url: `/axios`,
            data: date,
          }); //promise 객체를 반환함.

          const { name, gender } = response.data; //구조 분해 할당.
          resultBox.textContent = `POST /axios 요청 완료 : ${name} 님의 성별은 ${gender} 네요~`;
        } catch (err) {
          resultBox.textContent = "에러 발생! 다시 시도해주세요~";
          console.log(err);
        }
      }

      function fetchGET() {
        console.log("fetchPOST 함수 호출");
        const form = document.forms["register"];
        const date = {
          name: form.username.value,
          gender: form.gender.value,
        };

        //fetch는 default로 get 방식으로 작동(생략 가능)
        fetch(`/fetch?name=${date.name}&gender=${date.gender}`)
          .then((response) => {
            console.log(response);
            //json 형태로 응답 데이터를 전달 받음. 응답 객체는 json()이라는 메서드를 제공
            //응답 객체로부터 JSON 포맷의 응답 전문을 자바스크립트 객체로 변환시켜야 한다.
            //console.log(response.json()); //Promise 객체
            return response.json();
          })
          .then((data) => {
            console.log(data);
            resultBox.textContent = `get fetch 요청 완료 : ${data.name} 님의 성별은 ${data.gender} 네요~`;
          });
      }
      function fetchPOST() {
        console.log("fetchPOST 함수 호출");
        const form = document.forms["register"];
        const date = {
          name: form.username.value,
          gender: form.gender.value,
        };

        //fetch는 default로 get 방식으로 작동(생략 가능)
        //여러가지 Content-type이 존재한다.
        //fetch를 이용해 post 요청을 보낼 때는 option 객체가 필요함!
        /*
         1. method 키 post 지정
         2. headers 키 JSON 포맷 사용 선언
         3. body 키 서버로 보낼 데이터 지정
        */
        fetch("/fetch", {
          method: "post",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(date), // js obj -> json
        })
          .then((response) => {
            console.log(response);
            return response.json();
          })
          .then((data) => {
            resultBox.textContent = `post /fetch 요청 완료 : ${data.name} 님의 성별은 ${data.gender} 네요~`;
          });
      }
    </script>
  </body>
</html>
